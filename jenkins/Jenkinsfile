pipeline {
    agent any
    tools { 
        maven 'Maven_3.6.3' 
        jdk 'jdk8' 
    }
    stages {
        stage('Clean') {
            steps {
                bat 'mvn -B clean'
            }
        }
        stage('CompileSourceCode') {
            steps {
                bat 'mvn -B compiler:compile'
            }
        }
         stage('CompileTestCode') {
            steps {
                bat 'mvn -B compiler:testCompile'
            }
        }
        stage('Build') {
            steps {
                bat 'mvn -B -DskipTests package'
            }
        }
        stage('Test') {
            steps {
                bat 'mvn -B test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                bat 'sh ./jenkins/scripts/deliver.sh'
            }
        }
    }
    post {
        always {
            echo 'Test run completed'
            //cucumber buildStatus: 'UNSTABLE', failedFeaturesNumber: 999, failedScenariosNumber: 999, failedStepsNumber: 3, fileIncludePattern: '**/*.json', skippedStepsNumber: 999
        }
        success {
            echo 'Successfully!'
            emailext (
                subject: "Job '${env.JOB_NAME} ${env.BUILD_NUMBER}'",
                body: """<p>Check console output at <a href="${env.BUILD_URL}">${env.JOB_NAME}</a></p>""",
                to: "mohamedelwarraky8@gmail.com",
                from: "jenkins@code-maven.com"
            )
        }
        failure {
            echo 'Failed!'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
   

    // The options directive is for configuration that applies to the whole job.
    options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        // buildDiscarder(logRotator(numToKeepStr:'10'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 60, unit: 'MINUTES')
    }
}
